@using Models
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Online Chat</title>
    <link href="~/Content/Site.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <script src="~/Scripts/modernizr-2.8.3.js"></script>
</head>
<body onload="Show();">
    <ul class="nav justify-content-end">
        <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/Page/Home">Home</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/Page/About">About</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/Page/Contact">Contact</a>
        </li>
    </ul>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("İ'zdiv'acına Tali'bim", "Index", "Home", new { area = "" }, new { @class = "title" })
                @if (Session["ID"] == null)
                {
                    @Html.Action("Login")
                }
            else
            {
               @Html.Action("LoginOK")
            }

            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                </ul>
            </div>
        </div>
    </div>
    <div class="containerRender">
 <div>
     @RenderBody()
 </div>
        <footer>
            <button type="button" class="btn btn-dark" id="liveToastBtn">Show live toast</button>

            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <img src="..." class="rounded me-2" alt="...">
                        <strong class="me-auto">Bootstrap</strong>
                        <small>11 mins ago</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        Hello, world! This is a toast message.
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
</body>
</html>
<style>
    body{
        background-color:beige;
        background:url('../../image/banner.jpg');
    }
   
    .title{
       font-size:30px;
       color:black;
       font-weight:bold;
       text-decoration:none;
    }
</style>
<script>
    function Show() {
        personMessage();
    }
    function personMessage() {
        var btnUser = document.getElementsByClassName("btn-primary");
        var div = document.getElementById("messages");
        var u = document.getElementById("clickUser");
        var send = document.getElementById("sendComp");
        for (var i = 0; i < btnUser.length; i++) {
            btnUser[i].addEventListener("click", function () {
                factorySettings();
                send.style.display = "block";
                this.style.backgroundColor = "Red";
                u.innerText = this.innerText;
                alert(this.value);
                var id = this.value;
                div.innerHTML = "";
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var myDatas=JSON.parse(xhr.responseText);
                        let datas = Array.from(myDatas)
                        for (var j = 0; j < datas.length; j++) {
                            var mC = document.createElement("div");
                            mC.innerText = datas[j].MessageContent;
                            if (datas[j].SenderID == id)
                                mC.className = "leftSender";
                            else
                                mC.className = "rightSender";
                            div.appendChild(mC);
                        }
                    }
                };
                xhr.open("GET", "/Message/MessagesPerson", true);
                xhr.send();

            });
        }
    }
    function factorySettings() {
        var btnUser = document.getElementsByClassName("btn-primary");
        for (var i = 0; i < btnUser.length; i++) {
            btnUser[i].style.backgroundColor="blue";
        }
    }
  
</script>
<style>
    .leftSender {
        margin-left: 100px;
        border-radius: 15px;
        border: 1px solid;
        background-color: gold;
        width: 250px;
        height: 60px;
        font-size: 20px;
        padding-left: 30px;
        padding-top: 10px;
        color: darkblue;
    }
    .rightSender {
        margin-left: 300px;
        border-radius: 15px;
        border: 1px solid;
        background-color: blueviolet;
        width: 250px;
        height: 60px;
        font-size: 20px;
        padding-left:30px;
        padding-top: 10px;
        color: floralwhite;
    }
    .userList{
        position:relative;
        height:max-content;
        width:max-content;
        margin-top:70px;
    }
    .containerRender{
        background-color:antiquewhite;
    }
    li{
        list-style-type:none;
    }
    a{
        text-decoration:none;
    }
    #sendComp{
        display:none;
    }
</style>